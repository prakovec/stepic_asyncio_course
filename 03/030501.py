import asyncio

"""
asyncio.create_task(coro(), *, name=None, context=None) — принимает следующие аргументы:

coro() — корутина, которую нужно обернуть в задачу и запустить в цикле событий.

name — необязательный параметр, который позволяет установить имя для задачи. Это может быть полезно для отладки и мониторинга программы.

context — необязательный параметр, который позволяет задать контекст (context) для задачи. Контекст – это словарь с дополнительными данными, которые могут быть использованы внутри корутины.
"""

async def my_coroutine():
    await asyncio.sleep(1)
    print('Задача выполнена')


async def main():
    task = asyncio.create_task(my_coroutine())  # Создаем задачу из корутины. Этот метод позволяет начать выполнение корутины и возвращает объект Task, который можно ожидать
    await task  # Ожидаем выполнения задачи. Благодаря этому код будет ждать выполнения задачи, прежде чем завершиться


asyncio.run(main())