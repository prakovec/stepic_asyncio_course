"""
Queue - это реализация асинхронной очереди в модуле asyncio. Класс предоставляет удобный интерфейс для передачи данных между асинхронными задачами в виде очереди. Очередь поддерживает добавление элементов в конец и извлечение элементов из начала.
Хотя очереди в asyncio и не являются потокобезопасными, они предназначены для использования именно в коде async/await. 

Этот код демонстрирует использование примитива синхронизации Queue в библиотеке asyncio для обмена данными между производителем и потребителем через асинхронную очередь. Производитель помещает элементы в очередь, а потребитель извлекает их. Задержки между действиями имитируют реальное время выполнения задач и позволяют асинхронной программе работать эффективно.
"""

import asyncio

# Корутина производителя
async def producer(queue):
    for i in range(5):
        await queue.put(i)
        print(f'Производитель: Положил в очередь элемент {i}')
        await asyncio.sleep(1)
    await queue.put(None)   # Сигнал потребителю о завершении

# Корутина потребителя
async def consumer(queue):
    while True:
        item = await queue.get()
        if item is None:   # Проверяем сигнал о завершении
            break          # Прерываем цикл, если получен сигнал о завершении
        print(f'Потребитель: Получил элемент из очереди {item}') 
        await asyncio.sleep(0.5)                                   
        queue.task_done()                                           # Отмечаем выполнение задачи

# Основная корутина
async def main():
    queue = asyncio.Queue()                                # Создаем очередь
    task_producer = asyncio.create_task(producer(queue))   # Создаем задачу для производителя
    task_consumer = asyncio.create_task(consumer(queue))   # Создаем задачу для потребителя
    await asyncio.gather(task_producer, task_consumer)     # Ожидаем завершения задач производителя и потребителя


asyncio.run(main())