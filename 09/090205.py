"""
Пример ниже реализует простую модель банковского счета с возможностью внесения денежных средств и снятия. В нем определены три асинхронные функции: deposit, withdraw и main.
"""

import asyncio

# Устанавливаем начальный баланс
balance = 100

# Создаем объект lock для синхронизации
lock = asyncio.Lock()

# Определяем асинхронную функцию пополнения счета
async def deposit(amount):

    # Объявляем переменную balance как глобальную
    global balance

    # Используем lock, чтобы защитить доступ к переменной balance
    async with lock:

        # Выводим сообщение о пополнении счета
        print(f"Баланс пополнен на {amount} у.е.")

        # Пополняем баланс
        balance += amount

        # Выводим текущий баланс
        print(f"Текущий баланс {balance}")

# Определяем асинхронную функцию снятия средств
async def withdraw(amount):

    # Объявляем переменную balance как глобальную
    global balance

    # Используем lock, чтобы защитить доступ к переменной balance
    async with lock:

        # Проверяем, хватает ли средств для снятия
        if balance >= amount:

            # Выводим сообщение о снятии средств
            print(f"Снятие {amount} у.е.")

            # Снимаем средства
            balance -= amount

            #Выводим текущий баланс
            print(f"Текущий баланс {balance}")
        else:
            # Выводим сообщение о недостаточности средств
            print(f"Попытка снять {amount}, недостаточно средств, текущий баланс {balance} у.е.")

# Определяем основную асинхронную функцию
async def main():

    # Создаем задачу для функции deposit и пополняем баланс на 50 у.е.
    task1 = asyncio.create_task(deposit(50))

    # Создаем задачу для функции withdraw и пытаемся списать с баланса 200 у.е.
    task2 = asyncio.create_task(withdraw(200))

    # Ожидаем завершения задачи task1
    await task1

    # Ожидаем завершения задачи task2
    await task2

# Запускаем основную асинхронную функцию
asyncio.run(main())