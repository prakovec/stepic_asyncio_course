"""
Barrier в asyncio - это механизм синхронизации, который позволяет программе ожидать, пока все участвующие задачи (или "корутины" в терминах asyncio) не достигнут определенной точки. После того как все участвующие задачи достигают этой точки, они могут продолжить свое выполнение. Иначе суть работы барьера заключается в том, что каждая задача, которая доходит до барьера, останавливается и ждет, пока все остальные задачи не достигнут барьера. Когда все задачи достигли барьера, они все продолжают выполнение.

В этом примере используется механизм "барьера".
"""

import asyncio

async def worker(barrier, worker_num):
    print(f'Работник {worker_num} начал свою работу')
    await asyncio.sleep(worker_num)  # Имитируем выполнение работы
    print(f'Работник {worker_num} завершил свою работу и ожидает остальных')
    await barrier.wait()  # Ожидаем, пока все работники не завершат свою работу
    print(f'Все работники закончили. Работник {worker_num} продолжает выполнение.')

async def main():
    barrier = asyncio.Barrier(3)  # Создаем барьер для 3х работников
    await asyncio.gather(
        worker(barrier, 1),
        worker(barrier, 2),
        worker(barrier, 3),
    )

asyncio.run(main())