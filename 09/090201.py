"""
В этом примере await lock.acquire() используется для захвата блокировки, что приводит к остановке выполнения кода в текущей корутине, пока блокировка не будет освобождена. После выполнения кода в блоке try блокировка освобождается с помощью lock.release().
"""

import asyncio

# Создание объекта Lock
lock = asyncio.Lock()

# определение корутины "my_task" с аргументом "task_id"
async def my_task(task_id):
    # Вывод сообщения о том, что задача ждет блокировки
    print(f"Задача {task_id} ожидает блокировки с помощью Lock")

    # Ожидание получения блокировки
    await lock.acquire()

    try:
        # Вывод сообщения о том, что задача получила блокировку
        print(f"Задача {task_id} получила блокировку")

        # Остановка выполнения корутины на 2 секунды
        await asyncio.sleep(2)

    finally:
        # Вывод сообщения о том, что задача освобождает блокировку
        print(f"Задача {task_id} блокировка снята")

        # Освобождение блокировки
        lock.release()

# Определение главной корутины
async def main():
    # Создание списка задач из 5 вызовов "my_task"
    tasks = [asyncio.create_task(my_task(i)) for i in range(5)]

    # Запуск всех корутин
    await asyncio.gather(*tasks)


# Запуск главной корутины
asyncio.run(main())