"""
asyncio.Lock()
Lock - это примитив синхронизации, который используется для ограничения доступа к общему ресурсу. Это один из самых базовых инструментов синхронизации и, вероятно, самый легко понятный. В асинхронном контексте Lock можно использовать для того, чтобы гарантировать, что только одна корутина в определенный момент времени имеет доступ к определенному ресурсу.

Этот код демонстрирует использование примитива синхронизации Lock в библиотеке asyncio для ограничения доступа к общему ресурсу только одной корутине в определенный момент времени.
"""

import asyncio

# создаем экземпляр Lock
lock = asyncio.Lock()

async def my_coroutine(id):
    print(f'Корутина {id} хочет получить блокировку')
    async with lock:
        # Код внутри этого блока будет выполняться только одной корутиной в один момент времени
        print(f'Корутина {id} получила блокировку')
        await asyncio.sleep(1)
    print(f'Корутина {id} отпустила блокировку')


# запускаем несколько корутин
async def main():
    await asyncio.gather(
        my_coroutine(1),
        my_coroutine(2),
        my_coroutine(3),
    )


asyncio.run(main())