# Обработка ошибок при использовании Semaphore:
import asyncio


sem = asyncio.Semaphore(2)  # Ограничивает количество одновременно выполняемых задач до двух

async def task(id):
    try:
        async with sem:  # Используется для управления доступом к критической секции кода
            print(f'Задача {id} начала выполнение')  # Информируем о начале выполнения задачи
            await asyncio.sleep(1)  # Имитируем задержку, позволяющую другим задачам выполниться
            if id == 2:  # Для задачи с id 2 искусственно создаем исключение
                raise Exception('Ошибка в задаче')  # Поднимаем исключение
            print(f'Задача {id} завершила выполнение')  # Информируем о завершении задачи
    except Exception as e:
        print(f'В задаче {id} произошла ошибка: {e}')  # Обрабатываем исключение и информируем о нем


async def main():
    tasks = [task(i) for i in range(5)]  # Создаем список задач для выполнения
    await asyncio.gather(*tasks)  # Используется для выполнения всех задач асинхронно

# Запускаем все задачи
asyncio.run(main())