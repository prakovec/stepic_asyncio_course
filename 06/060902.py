import asyncio

# Определение асинхронной функции main_task, которая представляет собой корутину
async def main_task():
    # Вывод сообщения о запуске корутины main_task
    print("Корутина main_task запустилась")
    # Ожидание (приостановка выполнения корутины) на 5 секунд
    await asyncio.sleep(5)
    # Вывод сообщения о завершении корутины main_task
    print("Корутина main_task завершилась")

# Определение асинхронной функции main, которая является основной точкой входа
async def main():
    # Создание асинхронной задачи из корутины main_task
    task = asyncio.create_task(main_task())
    # Ожидание (приостановка выполнения корутины) на 1 секунду
    await asyncio.sleep(1)
    # Отмена задачи 
    task.cancel()
    # Ожидание (приостановка выполнения корутины) на 2 секунды
    await asyncio.sleep(2)
    # Проверка, была ли задача отменена, и вывод соответствующего сообщения
    if task.cancelled():
        print(f"Задача отменена - {task.cancelled()}")


# Запуск асинхронной функции main с использованием функции asyncio.run
asyncio.run(main())